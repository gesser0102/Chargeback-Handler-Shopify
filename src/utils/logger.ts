import { getEnvironmentWithoutRequest } from './environmentDetector';

/**
 * Sistema de logging configur√°vel para otimizar performance em produ√ß√£o
 */
export class Logger {
  private static isDevelopment = getEnvironmentWithoutRequest() === 'development';

  /**
   * Log de debug - apenas em desenvolvimento
   */
  static debug(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.log(`üîç DEBUG: ${message}`, ...args);
    }
  }

  /**
   * Log de informa√ß√£o - sempre exibido
   */
  static info(message: string, ...args: any[]): void {
    console.log(`‚ÑπÔ∏è INFO: ${message}`, ...args);
  }

  /**
   * Log de sucesso - sempre exibido
   */
  static success(message: string, ...args: any[]): void {
    console.log(`‚úÖ SUCCESS: ${message}`, ...args);
  }

  /**
   * Log de aviso - sempre exibido
   */
  static warn(message: string, ...args: any[]): void {
    console.log(`‚ö†Ô∏è WARN: ${message}`, ...args);
  }

  /**
   * Log de erro - sempre exibido
   */
  static error(message: string, ...args: any[]): void {
    console.error(`‚ùå ERROR: ${message}`, ...args);
  }

  /**
   * Log de processamento - apenas em desenvolvimento
   */
  static process(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.log(`üîÑ PROCESS: ${message}`, ...args);
    }
  }

  /**
   * Log de dados do customer - apenas em desenvolvimento
   */
  static customer(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.log(`üë§ CUSTOMER: ${message}`, ...args);
    }
  }

  /**
   * Log de webhook - apenas em desenvolvimento
   */
  static webhook(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.log(`üìù WEBHOOK: ${message}`, ...args);
    }
  }
} 